<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NewLife.Redis</name>
    </assembly>
    <members>
        <member name="T:NewLife.Caching.FullRedis">
            <summary>Redis缓存</summary>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Register">
            <summary>注册</summary>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Create(System.String)">
            <summary>根据连接字符串创建</summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:NewLife.Caching.FullRedis.Mode">
            <summary>模式</summary>
        </member>
        <member name="P:NewLife.Caching.FullRedis.Cluster">
            <summary>集群</summary>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Init(System.String)">
            <summary>初始化配置</summary>
            <param name="config"></param>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Execute``1(System.String,System.Func{NewLife.Caching.RedisClient,``0},System.Boolean)">
            <summary>重载执行，支持集群</summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <param name="write">是否写入操作</param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.GetList``1(System.String)">
            <summary>获取列表</summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.GetDictionary``1(System.String)">
            <summary>获取哈希</summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.GetQueue``1(System.String)">
            <summary>获取队列</summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.GetSet``1(System.String)">
            <summary>获取Set</summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Append(System.String,System.String)">
            <summary>附加字符串</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>返回字符串长度</returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.GetRange(System.String,System.Int32,System.Int32)">
            <summary>获取字符串区间</summary>
            <param name="key"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.SetRange(System.String,System.Int32,System.String)">
            <summary>设置字符串区间</summary>
            <param name="key"></param>
            <param name="offset"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.StrLen(System.String)">
            <summary>字符串长度</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Rename(System.String,System.String,System.Boolean)">
            <summary>重命名指定键</summary>
            <param name="key"></param>
            <param name="newKey"></param>
            <param name="overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Search(System.String)">
            <summary>模糊搜索，支持?和*</summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.FullRedis.Search(System.String,System.Int32,System.Int32@)">
            <summary>模糊搜索，支持?和*</summary>
            <param name="pattern"></param>
            <param name="count"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.HyperLogLog">
            <summary>超级基数估算</summary>
            <remarks>
            HyperLogLog可以使用固定且很少的内存（每个HyperLogLog结构需要12K字节再加上key本身的几个字节）来存储集合的唯一元素。
            返回的可见集合基数并不是精确值， 而是一个带有 0.81% 标准错误（standard error）的近似值。
            例如为了记录一天会执行多少次各不相同的搜索查询， 一个程序可以在每次执行搜索查询时调用一次PFADD， 并通过调用PFCOUNT命令来获取这个记录的近似结果。
            注意: 这个命令的一个副作用是可能会导致HyperLogLog内部被更改，出于缓存的目的,它会用8字节的来记录最近一次计算得到基数,所以PFCOUNT命令在技术上是个写命令。
            </remarks>
        </member>
        <member name="M:NewLife.Caching.HyperLogLog.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化超级基数</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="M:NewLife.Caching.HyperLogLog.Add(System.String[])">
            <summary>添加</summary>
            <remarks>
            这个命令的一个副作用是它可能会更改这个HyperLogLog的内部来反映在每添加一个唯一的对象时估计的基数(集合的基数)。
            如果一个HyperLogLog的估计的近似基数在执行命令过程中发了变化， PFADD 返回1，否则返回0，
            如果指定的key不存在，这个命令会自动创建一个空的HyperLogLog结构（指定长度和编码的字符串）。
            如果在调用该命令时仅提供变量名而不指定元素也是可以的，如果这个变量名存在，则不会有任何操作，如果不存在，则会创建一个数据结构（返回1）
            </remarks>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="P:NewLife.Caching.HyperLogLog.Count">
            <summary>近似基数</summary>
            <remarks>
            返回存储在HyperLogLog结构体的该变量的近似基数，如果该变量不存在,则返回0。
            当参数为多个key时，返回这些HyperLogLog并集的近似基数，这个值是将所给定的所有key的HyperLoglog结构合并到一个临时的HyperLogLog结构中计算而得到的。
            </remarks>
        </member>
        <member name="M:NewLife.Caching.HyperLogLog.Merge(System.String[])">
            <summary>合并</summary>
            <remarks>
            将多个 HyperLogLog 合并（merge）为一个 HyperLogLog ， 合并后的 HyperLogLog 的基数接近于所有输入 HyperLogLog 的可见集合（observed set）的并集。
            合并得出的 HyperLogLog 会被储存在目标变量（第一个参数）里面， 如果该键并不存在， 那么命令在执行之前， 会先为该键创建一个空的。
            </remarks>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.Node">
            <summary>服务器节点。内部连接池</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Owner">
            <summary>拥有者</summary>
        </member>
        <member name="P:NewLife.Caching.Node.EndPoint">
            <summary>当前节点地址</summary>
        </member>
        <member name="P:NewLife.Caching.Node.ID">
            <summary>标识</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Flags">
            <summary>标志</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Master">
            <summary>主机。当前节点对应的主机</summary>
        </member>
        <member name="P:NewLife.Caching.Node.LinkState">
            <summary>链接状态</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Slave">
            <summary>是否从节点</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Slaves">
            <summary>当前节点的从节点集合</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Slots">
            <summary>本节点数据槽</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Importings">
            <summary>正在转入</summary>
        </member>
        <member name="P:NewLife.Caching.Node.Migratings">
            <summary>正在转出</summary>
        </member>
        <member name="M:NewLife.Caching.Node.ToString">
            <summary>已重载。返回地址</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.Node.Parse(System.String)">
            <summary>分析结果行</summary>
            <param name="line"></param>
        </member>
        <member name="M:NewLife.Caching.Node.Contain(System.Int32)">
            <summary>是否包含数据槽</summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.Node.GetSlots">
            <summary>返回所有槽</summary>
            <returns></returns>
        </member>
        <member name="P:NewLife.Caching.Node.Pool">
            <summary>连接池</summary>
        </member>
        <member name="M:NewLife.Caching.Node.Execute``1(System.Func{NewLife.Caching.RedisClient,``0},System.Boolean)">
            <summary>执行命令</summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">回调函数</param>
            <param name="write">是否写入操作</param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.PubSub">
            <summary>发布订阅</summary>
        </member>
        <member name="M:NewLife.Caching.PubSub.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化发布订阅</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="M:NewLife.Caching.PubSub.PSubscribe(System.String[])">
            <summary>订阅给定的模式</summary>
            <remarks>
            支持的模式(patterns)有:
            h? llo subscribes to hello, hallo and hxllo
            h* llo subscribes to hllo and heeeello
            h[ae]llo subscribes to hello and hallo, but not hillo
            如果想输入普通的字符，可以在前面添加\
            </remarks>
            <param name="patterns"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.PubSub.PUnSubscribe(System.String[])">
            <summary>指示客户端退订指定模式，若果没有提供模式则退出所有模式</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.PubSub.Subscribe(System.String[])">
            <summary>订阅给指定频道的信息</summary>
            <param name="channels"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.PubSub.UnSubscribe(System.String[])">
            <summary>退订给定的频道</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.PubSub.Publish(System.String)">
            <summary>发布</summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.PubSub.Pubsub">
            <summary>自省</summary>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.RedisBase">
            <summary>基础结构</summary>
        </member>
        <member name="P:NewLife.Caching.RedisBase.Redis">
            <summary>客户端对象</summary>
        </member>
        <member name="P:NewLife.Caching.RedisBase.Key">
            <summary>键</summary>
        </member>
        <member name="M:NewLife.Caching.RedisBase.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="M:NewLife.Caching.RedisBase.Execute``1(System.Func{NewLife.Caching.RedisClient,``0},System.Boolean)">
            <summary>执行命令</summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <param name="write">是否写入操作</param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisBase.ToBytes(System.Object)">
            <summary>数值转字节数组</summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisBase.FromBytes(NewLife.Data.Packet,System.Type)">
            <summary>字节数组转对象</summary>
            <param name="pk"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisBase.FromBytes``1(NewLife.Data.Packet)">
            <summary>字节数组转对象</summary>
            <typeparam name="T"></typeparam>
            <param name="pk"></param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.RedisCluster">
            <summary>Redis集群</summary>
        </member>
        <member name="P:NewLife.Caching.RedisCluster.Nodes">
            <summary>集群节点</summary>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.#ctor(NewLife.Caching.Redis)">
            <summary>实例化</summary>
            <param name="redis"></param>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.ParseNodes(System.String)">
            <summary>分析节点</summary>
            <param name="nodes"></param>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.SelectNode(System.String)">
            <summary>根据Key选择节点</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.Map(System.String,System.String)">
            <summary>把Key映射到指定地址的节点</summary>
            <param name="endpoint"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.Meet(System.String,System.Int32)">
            <summary>向集群添加新节点</summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.AddSlots(NewLife.Caching.Node,System.Int32[])">
            <summary>向节点增加槽</summary>
            <param name="node"></param>
            <param name="slots"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.DeleteSlots(NewLife.Caching.Node,System.Int32[])">
            <summary>从节点删除槽</summary>
            <param name="node"></param>
            <param name="slots"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisCluster.Rebalance">
            <summary>重新负载均衡</summary>
            <remarks>
            节点迁移太负责，直接干掉原来的分配，重新全局分配
            </remarks>
        </member>
        <member name="T:NewLife.Caching.RedisHash`2">
            <summary>哈希结构</summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="P:NewLife.Caching.RedisHash`2.Count">
            <summary>个数</summary>
        </member>
        <member name="P:NewLife.Caching.RedisHash`2.Keys">
            <summary>获取所有键</summary>
        </member>
        <member name="P:NewLife.Caching.RedisHash`2.Values">
            <summary>获取所有值</summary>
        </member>
        <member name="P:NewLife.Caching.RedisHash`2.Item(`0)">
            <summary>获取 或 设置 指定键的值</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.ContainsKey(`0)">
            <summary>是否包含指定键</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.Add(`0,`1)">
            <summary>添加</summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.Remove(`0)">
            <summary>删除</summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.TryGetValue(`0,`1@)">
            <summary>尝试获取</summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.Clear">
            <summary>清空</summary>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.GetEnumerator">
            <summary>迭代</summary>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.HDel(`0[])">
            <summary>批量删除</summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.HMGet(`0[])">
            <summary>只在 key 指定的哈希集中不存在指定的字段时，设置字段的值</summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.HMSet(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>批量插入</summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.GetAll">
            <summary>获取所有名值对</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.HIncrBy(`0,System.Int64)">
            <summary>增加指定字段值</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.HIncrBy(`0,System.Double)">
            <summary>增加指定字段值</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.HSetNX(`0,`1)">
            <summary>只在 key 指定的哈希集中不存在指定的字段时，设置字段的值</summary>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.HStrLen(`0)">
            <summary>返回hash指定field的value的字符串长度</summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisHash`2.Search(System.String,System.Int32,System.Int32@)">
            <summary>模糊搜索，支持?和*</summary>
            <param name="pattern"></param>
            <param name="count"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.RedisList`1">
            <summary>列表结构</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="P:NewLife.Caching.RedisList`1.Item(System.Int32)">
            <summary>获取 或 设置 指定位置的值</summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:NewLife.Caching.RedisList`1.Count">
            <summary>个数</summary>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.Add(`0)">
            <summary>添加元素在后面</summary>
            <param name="item"></param>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>批量添加</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.Clear">
            <summary>清空列表-start>end 清空</summary>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.Contains(`0)">
            <summary>是否包含指定元素</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.CopyTo(`0[],System.Int32)">
            <summary>复制到目标数组</summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.IndexOf(`0)">
            <summary>查找指定元素位置</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.Insert(System.Int32,`0)">
            <summary>在指定位置插入</summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.Remove(`0)">
            <summary>删除指定元素</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.RemoveAt(System.Int32)">
            <summary>删除指定位置数据</summary>
            <param name="index"></param>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.GetEnumerator">
            <summary>遍历</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.RPUSH(System.Collections.Generic.IEnumerable{`0})">
            <summary>批量添加</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.LPUSH(System.Collections.Generic.IEnumerable{`0})">
            <summary>批量添加</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.LInsertBefore(`0,`0)">
            <summary>在指定元素之前插入</summary>
            <param name="pivot"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.LInsertAfter(`0,`0)">
            <summary>返回指定范围的列表</summary>
            <param name="pivot"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.LRange(System.Int32,System.Int32)">
            <summary>返回指定范围的列表</summary>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.GetAll">
            <summary>获取所有元素</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.LTrim(System.Int32,System.Int32)">
            <summary>修剪一个已存在的列表</summary>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisList`1.LRem(System.Int32,`0)">
            <summary>从存于 key 的列表里移除前 count 次出现的值为 value 的元素</summary>
            <param name="count"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.RedisQueue`1">
            <summary>生产者消费者</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NewLife.Caching.RedisQueue`1.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化队列</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="M:NewLife.Caching.RedisQueue`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>生产添加</summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisQueue`1.Take(System.Int32)">
            <summary>消费获取</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.RedisSet`1">
            <summary>Set结构</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="P:NewLife.Caching.RedisSet`1.Count">
            <summary>个数</summary>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.Add(`0)">
            <summary>添加元素在后面</summary>
            <param name="item"></param>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.Clear">
            <summary>清空列表</summary>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.Contains(`0)">
            <summary>是否包含指定元素</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.CopyTo(`0[],System.Int32)">
            <summary>复制到目标数组</summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.Remove(`0)">
            <summary>删除指定元素</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.GetEnumerator">
            <summary>遍历</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.SAdd(`0[])">
            <summary>批量添加</summary>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.SDel(`0[])">
            <summary>批量删除</summary>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.GetAll">
            <summary>获取所有元素</summary>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.Move(System.String,`0)">
            <summary>将member从source集合移动到destination集合中</summary>
            <param name="dest"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.RandomGet(System.Int32)">
            <summary>随机获取多个</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.Pop(System.Int32)">
            <summary>随机获取并弹出</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.RedisSet`1.Search(System.String,System.Int32,System.Int32@)">
            <summary>模糊搜索，支持?和*</summary>
            <param name="pattern"></param>
            <param name="count"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.Slot">
            <summary>数据槽区间</summary>
        </member>
        <member name="F:NewLife.Caching.Slot.From">
            <summary>起始</summary>
        </member>
        <member name="F:NewLife.Caching.Slot.To">
            <summary>结束</summary>
        </member>
        <member name="M:NewLife.Caching.Slot.ToString">
            <summary>已重载。返回区间</summary>
            <returns></returns>
        </member>
        <member name="T:NewLife.Caching.SortedSet`1">
            <summary>排序集合</summary>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.#ctor(NewLife.Caching.Redis,System.String)">
            <summary>实例化超级基数</summary>
            <param name="redis"></param>
            <param name="key"></param>
        </member>
        <member name="P:NewLife.Caching.SortedSet`1.Count">
            <summary>个数</summary>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.Add(`0,System.Double)">
            <summary>添加</summary>
            <param name="item"></param>
            <param name="score"></param>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.Remove(`0)">
            <summary>删除</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.GetScore(`0)">
            <summary>返回有序集key中，成员member的score值</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.Add(System.String,System.Collections.Generic.IDictionary{`0,System.Double})">
            <summary>批量添加</summary>
            <remarks>
            将所有指定成员添加到键为key有序集合（sorted set）里面。 添加时可以指定多个分数/成员（score/member）对。
            如果指定添加的成员已经是有序集合里面的成员，则会更新改成员的分数（scrore）并更新到正确的排序位置。
            
            
            ZADD 命令在key后面分数/成员（score/member）对前面支持一些参数，他们是：
            XX: 仅仅更新存在的成员，不添加新成员。
            NX: 不更新存在的成员。只添加新成员。
            CH: 修改返回值为发生变化的成员总数，原始是返回新添加成员的总数(CH 是 changed 的意思)。
            更改的元素是新添加的成员，已经存在的成员更新分数。 所以在命令中指定的成员有相同的分数将不被计算在内。
            注：在通常情况下，ZADD返回值只计算新添加成员的数量。
            INCR: 当ZADD指定这个选项时，成员的操作就等同ZINCRBY命令，对成员的分数进行递增操作。
            </remarks>
            <param name="options">支持参数</param>
            <param name="members"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.FindCount(System.Double,System.Double)">
            <summary>
            返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.Increment(`0,System.Double)">
            <summary>为有序集key的成员member的score值加上增量increment</summary>
            <param name="member"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.PopMax(System.Int32)">
            <summary>删除并返回有序集合key中的最多count个具有最高得分的成员</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.PopMin(System.Int32)">
            <summary>删除并返回有序集合key中的最多count个具有最低得分的成员</summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.Range(System.Int32,System.Int32)">
            <summary>返回指定范围的列表</summary>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.Rank(`0)">
            <summary>返回有序集key中成员member的排名。其中有序集成员按score值递增(从小到大)顺序排列</summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NewLife.Caching.SortedSet`1.Search(System.String,System.Int32,System.Int32@)">
            <summary>模糊搜索，支持?和*</summary>
            <param name="pattern"></param>
            <param name="count"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
    </members>
</doc>
